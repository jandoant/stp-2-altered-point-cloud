package com.jandoant.helper;

import com.jandoant.stp_entities.*;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

class StpEntityBuilderTest {

    @ParameterizedTest
    @ValueSource(ints = { 1, 2, 3 })
    void testWithValueSource(int argument) {
        assertTrue(argument > 0 && argument < 4);
    }

    @ParameterizedTest
    @DisplayName("should return true if String describes an entity")
    @ValueSource(strings = {
            "#31=ORIENTED_EDGE('',*,*,#27,.T.);",
            "#76=CARTESIAN_POINT('CARTPoint1',(0.,0.,30.));",
            "#66=DIRECTION('',(0.,0.,-1.));",
            "#58=AXIS2_PLACEMENT_3D('',#68,#61,#62);",
            "#36=ADVANCED_FACE('',(#13),#35,.T.);",
            "#35=PLANE('',#58);",
            "#34=ORIENTED_EDGE('',*,*,#30,.T.);",
            "#30=EDGE_CURVE('',#26,#23,#18,.T.);",
            "#26=VERTEX_POINT('',#74);",
            "#22=VECTOR('',#66,10.);",
            "#18=LINE('',#76,#22);",
            "#14=EDGE_LOOP('',(#31,#32,#33,#34));",
            "#13=FACE_OUTER_BOUND('',#14,.T.);"
    })
    void testDescribesEntityTrue(String argument){
        //act
        StpEntityBuilder builder = new StpEntityBuilder(argument);
        //assert
        assertTrue(builder.describesEntity());
    }

    @ParameterizedTest
    @DisplayName("should return false if String does not describe an entity")
    @ValueSource(strings = {
            "FILE_SCHEMA (('CONFIG_CONTROL_DESIGN'));",
            "ISO-10303-21;",
            "HEADER;",
            "/* Generated by software containing ST-Developer",
            " * from STEP Tools, Inc. (www.steptools.com) ",
            " */",
            "FILE_SCHEMA (('CONFIG_CONTROL_DESIGN'));",
            "ENDSEC;",
            "DATA;"
    })
    void testDescribesEntityFalse(String testDescription){
        //act
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);
        //assert
        assertFalse(builder.describesEntity());
    }

    @Test
    @DisplayName("Should instantiate a StpCartesianPoint if correct Descripton is given")
    void testCorrectCartesianPoint(){
        //SetUp
        String testDescription = "#76=CARTESIAN_POINT('CARTPoint1',(0.,0.,30.));";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);
        //expectation
        StpCartesianPoint expected = new StpCartesianPoint(
                76,
                "CARTPoint1",
                0.0,
                0.0,
                30.0);
        //Act
        StpCartesianPoint actual = (StpCartesianPoint) builder.extractStpEntity();
        //Assert
        assertTrue(actual.equals(expected));
    }

    @Test
    @DisplayName("Should instantiate another StpCartesianPoint if correct Descripton is given")
    void testAnotherCorrectCartesianPoint(){

        //SetUp
        String testDescription = "#67=CARTESIAN_POINT('',(0.3,0.,15.));";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);

        //expectation
        StpCartesianPoint expected = new StpCartesianPoint(
                67,
                "",
                0.3,
                0.0,
                15.0);

        //Act
        StpCartesianPoint actual = (StpCartesianPoint) builder.extractStpEntity();

        //Assert
        assertTrue(actual.equals(expected));
    }

    @Test
    @DisplayName("Should instantiate a StpDirection if correct Descripton is given")
    void testCorrectDirection(){

        //SetUp
        String testDescription = "#66=DIRECTION('',(0.,0.,-1.));";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);

        //expectation
        StpDirection expected = new StpDirection(
                66,
                "",
                0.0,
                0.0,
                -1.0);

        //Act
        StpDirection actual = (StpDirection) builder.extractStpEntity();

        //Assert
        assertTrue(actual.equals(expected));
    }

    @Test
    @DisplayName("should instantiate Axis2Placement3D if correct description is given")
    void correctAxis2Placement3D(){

        //SetUp
        String testDescription = "#58=AXIS2_PLACEMENT_3D('',#68,#61,#62);";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);

        StpAxis2Placement3D expected = new StpAxis2Placement3D(
                58,
                "",
                68,
                61,
                62);

        //Act
        StpAxis2Placement3D actual = (StpAxis2Placement3D) builder.extractStpEntity();

        //assert
        assertTrue(actual.equals(expected));
    }

    @Test
    @DisplayName("Should instantiate a StpVector if correct Descripton is given")
    void testCorrectVector(){

        //SetUp
        String testDescription = "#22=VECTOR('',#66,10.);";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);

        //expectation
        StpVector expected = new StpVector(
                22,
                "",
                66,
                10.0);

        //Act
        StpVector actual = (StpVector) builder.extractStpEntity();

        //Assert
        assertTrue(actual.equals(expected));
    }

    @Test
    @DisplayName("Should instantiate a StpLine if correct Descripton is given")
    void testCorrectLine(){

        //SetUp
        String testDescription = "#18=LINE('',#76,#22);";
        StpEntityBuilder builder = new StpEntityBuilder(testDescription);

        //expectation
        StpLine expected = new StpLine(
                18,
                "",
                76,
                22);

        //Act
        StpLine actual = (StpLine) builder.extractStpEntity();

        //Assert
        assertTrue(actual.equals(expected));
    }

}